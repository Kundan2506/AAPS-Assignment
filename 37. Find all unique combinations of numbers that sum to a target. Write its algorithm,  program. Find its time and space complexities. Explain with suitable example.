public class CombinationSum {

    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates); 
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    private static void backtrack(int[] candidates, int target, int start, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1]) continue;

            if (candidates[i] > target) break;

            current.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i, current, result);
            
            current.remove(current.size() - 1);
        }
    }
}

ðŸ”¹Time and Space Complexity:

Time Complexity: O(2^n) where n is the number of elements in the candidates array. In the worst case, we explore every subset of the array, but with pruning due to the target constraint, this can be reduced.
Space Complexity: O(k) where k is the maximum size of a combination. The recursion stack and current combination list contribute to the space complexity.

