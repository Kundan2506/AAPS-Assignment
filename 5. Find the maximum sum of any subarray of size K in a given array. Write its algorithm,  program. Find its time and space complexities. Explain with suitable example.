ðŸ”¹1. Algorithm (Sliding Window)
Input: Array arr[], Integer K
Output: Maximum sum of any subarray of size K

* Steps:

1.Compute the sum of the first window of size K.
2.Slide the window by one element at a time:
  Subtract the element that is left behind.
  Add the new element entering the window.
3.Update the maximum sum after each slide.
4.Return the maximum sum found.

ðŸ”¹2. Java Program
public static int maxSum(int[] arr, int k) {
        int n = arr.length;
        if (n < k) {
            System.out.println("Window size K is larger than array size.");
            return -1;
        }

        int windowSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }

        int maxSum = windowSum;

        for (int i = k; i < n; i++) {
            windowSum = windowSum - arr[i - k] + arr[i];
            maxSum = Math.max(maxSum, windowSum);
        }
        return maxSum;
    }

ðŸ”¹3. Time and Space Complexity

Task	              Complexity
Time Complexity	    O(n)
Space Complexity	  O(1)

ðŸ”¹4. Example
arr = {1, 4, 2, 10, 23, 3, 1, 0, 20}
k = 4

Windows:
[1, 4, 2, 10] â†’ sum = 17
[4, 2, 10, 23] â†’ sum = 39
[2, 10, 23, 3] â†’ sum = 38
[10, 23, 3, 1] â†’ sum = 37
[23, 3, 1, 0] â†’ sum = 27
[3, 1, 0, 20] â†’ sum = 24

Output:
Maximum sum of subarray of size 4 is: 39
