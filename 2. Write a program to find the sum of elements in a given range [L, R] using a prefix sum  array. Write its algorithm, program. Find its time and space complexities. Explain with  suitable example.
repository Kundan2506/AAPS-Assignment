ðŸ”¹1. Algorithm: Prefix Sum for Range Sum Queries

Input:An array arr[] of size n
Multiple range queries in the form [L, R]

Steps:Create a prefix sum array prefix[] of the same size:

prefix[0] = arr[0]

For every i from 1 to n-1:

prefix[i] = prefix[i-1] + arr[i]
For a query [L, R], compute the sum:

If L == 0, return prefix[R]

Else, return prefix[R] - prefix[L - 1]

ðŸ”¹2.Java code:-

public static int[] buildPrefixSum(int[] arr) {
        int[] prefix = new int[arr.length];
        prefix[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }
        return prefix;
    }

    public static int rangeSum(int[] prefix, int L, int R) {
        if (L == 0) return prefix[R];
        return prefix[R] - prefix[L - 1];
    }

 ðŸ”¹3. Time and Space Complexity

Task	                    Time Complexity	        Space Complexity
Build Prefix Sum Array	  O(n)	                  O(n)
Answer each query	        O(1)	                  -
Total for q queries	      O(n + q)	              O(n)

ðŸ”¹4. Example and Output
Input:
arr = [2, 4, 1, 3, 5]
queries = [[1, 3], [0, 2], [2, 4]]

Prefix Sum Array:
[2, 6, 7, 10, 15]

Output:
Original Array: [2, 4, 1, 3, 5]
Prefix Sum Array: [2, 6, 7, 10, 15]
Sum from index 1 to 3 = 8
Sum from index 0 to 2 = 7
Sum from index 2 to 4 = 9
