ðŸ”¹Algorithm (Two-Pointer Technique)

1.Letâ€™s call the two heads headA and headB.
2.Create two pointers p1 and p2 at the start of each list.
3.Traverse the lists. When one pointer reaches the end, switch it to the head of the other list.
4.If there is an intersection, p1 and p2 will eventually meet at the intersection point. If not, both will be null at the same time.

ðŸ”¹Java Program
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class LinkedListIntersection {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode p1 = headA;
        ListNode p2 = headB;

        while (p1 != p2) {
            p1 = (p1 == null) ? headB : p1.next;
            p2 = (p2 == null) ? headA : p2.next;
        }

        return p1; 
    }
}

ðŸ”¹Time and Space Complexities

Time Complexity: O(n + m) where n and m are the lengths of the two lists
Space Complexity: O(1)
