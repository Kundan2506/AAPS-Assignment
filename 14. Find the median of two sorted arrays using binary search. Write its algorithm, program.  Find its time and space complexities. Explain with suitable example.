ðŸ”¹1.. Algorithm (Binary Search Approach)

Steps:
1.Ensure nums1 is the smaller array. Swap if necessary.
2.Perform binary search on nums1:
    Set low = 0, high = m
3.Loop:
    Partition nums1 at index i
    Partition nums2 at index j = (m + n + 1)/2 - i
4.Check conditions:
    left1 â‰¤ right2 && left2 â‰¤ right1
    If valid partition:
        If total length is even:
          median = (max(left1, left2) + min(right1, right2)) / 2
        If odd:  
          median = max(left1, left2)
    If left1 > right2: move left â†’ high = i - 1
    Else: move right â†’ low = i + 1

ðŸ”¹2. Java Code
public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length)
            return findMedianSortedArrays(nums2, nums1); 

        int m = nums1.length;
        int n = nums2.length;
        int low = 0, high = m;

        while (low <= high) {
            int i = (low + high) / 2;
            int j = (m + n + 1) / 2 - i;

            int left1 = (i == 0) ? Integer.MIN_VALUE : nums1[i - 1];
            int right1 = (i == m) ? Integer.MAX_VALUE : nums1[i];
            int left2 = (j == 0) ? Integer.MIN_VALUE : nums2[j - 1];
            int right2 = (j == n) ? Integer.MAX_VALUE : nums2[j];

            if (left1 <= right2 && left2 <= right1) {
                if ((m + n) % 2 == 0) {
                    return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;
                } else {
                    return Math.max(left1, left2);
                }
            } else if (left1 > right2) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }
        throw new IllegalArgumentException("Input arrays are not sorted properly.");
    }

ðŸ”¹3. Time & Space Complexity

Task	             Complexity
Time Complexity	   O(log(min(m, n)))
Space Complexity	 O(1)

5. Example Walkthrough
Input:
nums1 = {1, 3}
nums2 = {2}

Steps:
Total elements = 3 (odd)

Partition at i = 1 in nums1 â†’ left1 = 1, right1 = 3
Partition at j = 1 in nums2 â†’ left2 = 2, right2 = âˆž

Check:
left1 (1) â‰¤ right2 (âˆž)
left2 (2) â‰¤ right1 (3)

Valid partition â†’ median = max(1, 2) = 2
