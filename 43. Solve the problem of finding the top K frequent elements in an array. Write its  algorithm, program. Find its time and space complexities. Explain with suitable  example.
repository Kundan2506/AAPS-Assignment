public class TopKFrequentElements {

    public static List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        PriorityQueue<Map.Entry<Integer, Integer>> minHeap =
            new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());  

        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll().getKey());
        }

        return result;
    }
}

ðŸ”¹Time and Space Complexity Analysis:

Time Complexity:
  O(n) for counting the frequency of elements in the array.
  O(n log K) for processing each element in the frequency map and maintaining the min-heap of size K.
Therefore, the overall time complexity is O(n log K).

Space Complexity:
  O(n) for storing the frequency map, which can hold up to n unique elements in the worst case.
  O(K) for the min-heap that stores the top K frequent elements.
Therefore, the overall space complexity is O(n + K).
