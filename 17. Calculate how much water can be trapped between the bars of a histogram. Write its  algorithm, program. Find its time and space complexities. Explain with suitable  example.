ðŸ”¹1. Algorithm (Two-Pointer Space-Optimized Approach)

Steps:
1.Initialize two pointers left = 0 and right = n - 1
2.Track leftMax and rightMax
3.While left < right:
    If height[left] < height[right]:
        If height[left] â‰¥ leftMax: update leftMax
        Else: add leftMax - height[left] to water
        Move left++
    Else:
        If height[right] â‰¥ rightMax: update rightMax
        Else: add rightMax - height[right] to water
        Move right--

ðŸ”¹2. Java Code
public class TrappingRainWater {

    public static int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0, water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax)
                    leftMax = height[left];
                else
                    water += leftMax - height[left];
                left++;
            } else {
                if (height[right] >= rightMax)
                    rightMax = height[right];
                else
                    water += rightMax - height[right];
                right--;
            }
        }
        return water;
    }
}

ðŸ”¹3. Time and Space Complexity

Task	            Complexity
Time Complexity	  O(n)
Space Complexity	O(1)

ðŸ”¹4. Example
Input:
height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]

Visualization:
   â¬›â¬›      â¬›  
 â¬›â¬›â¬›â¬›  â¬›â¬›â¬› 
â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
0 1 0 2 1 0 1 3 2 1 2 1
Water is trapped in valleys between taller bars.

Total = 6 units.

