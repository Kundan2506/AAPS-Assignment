public class MaxFrequencyElement {

    public static int findMaxFrequencyElement(int[] nums) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        int maxElement = nums[0];
        int maxFrequency = 1;

        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxFrequency) {
                maxFrequency = entry.getValue();
                maxElement = entry.getKey();
            }
        }

        return maxElement;
    }
}

ðŸ”¹Time and Space Complexity Analysis:
Time Complexity:
  O(n) for traversing the array and building the frequency map.
  O(k) for iterating over the entries of the map, where k is the number of unique elements in the array. Since in the worst case, k can be equal to n (all elements are unique), this part is also O(n).
  Thus, the overall time complexity is O(n).

Space Complexity:
  O(n) for the space used by the frequency map. In the worst case, where all elements are unique, the map will have n entries.


