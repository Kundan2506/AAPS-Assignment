Concept of Bit Manipulation
Bit manipulation refers to the act of directly manipulating bits (the smallest unit of data in computing, represented as 0 or 1) using bitwise operators. In most programming languages, there are several bitwise operators that allow us to efficiently perform operations on the bits of an integer.

Common Bitwise Operators:
1.AND (&):
Compares each bit of two operands and returns 1 if both bits are 1, otherwise returns 0.
Example: 5 & 3 → 0101 & 0011 = 0001 → 1

2.OR (|):
Compares each bit of two operands and returns 1 if at least one of the bits is 1.
Example: 5 | 3 → 0101 | 0011 = 0111 → 7

3.XOR (^):
Compares each bit of two operands and returns 1 if the bits are different (i.e., one is 0 and the other is 1), otherwise returns 0.
Example: 5 ^ 3 → 0101 ^ 0011 = 0110 → 6

4.NOT (~):
Inverts all the bits of a number (i.e., 0 becomes 1 and 1 becomes 0).
Example: ~5 → ~0101 = 1010 (In the two's complement representation of integers)

5.Shift Left (<<):
Shifts the bits of a number to the left by a specified number of positions, effectively multiplying the number by 2 for each shift.
Example: 5 << 1 → 0101 << 1 = 1010 → 10

6.Shift Right (>>):
Shifts the bits of a number to the right by a specified number of positions, effectively dividing the number by 2 for each shift.
Example: 5 >> 1 → 0101 >> 1 = 0010 → 2

✅ Advantages of Bit Manipulation in Algorithm Design
1.Speed and Efficiency:
Bitwise operations are very fast compared to arithmetic operations like addition, subtraction, or multiplication. They are usually implemented at the hardware level, which makes them extremely efficient. This is important in algorithms that need to handle large datasets or require high performance.
For example, multiplying or dividing by powers of two can be done quickly using left or right shifts (<< or >>).

2.Space Efficiency:
Using bitwise operations, you can pack more information into a smaller space. For example, instead of using an array of n elements, you can use a single integer and store the presence or absence of n items in each of the bits. This is particularly useful for memory-constrained systems.
Example: To represent a set of elements, you can use a single integer to represent a set of 32 elements, where each bit corresponds to an element in the set.

3.Compact Representation:
Bit manipulation is useful in situations where data needs to be represented compactly, such as encoding and decoding information.
Example: You can store a sequence of boolean values (true/false) in an integer, where each bit represents a boolean value, instead of using an array of booleans.

4.Solving Problems on Binary Representation:
Many problems are naturally expressed in terms of binary numbers. Bit manipulation allows for efficient solutions to problems like counting set bits (number of 1s in binary representation), finding the largest power of two, or detecting even/odd numbers.
For example, detecting if a number is odd or even can be done quickly using a bitwise AND operation: number & 1.

5.Optimization in Certain Algorithms:
Bitwise operators can optimize common algorithms in fields like dynamic programming, combinatorics, and graph theory.
For example, in problems involving subsets, bit masking is a technique where each bit represents whether an element is in a subset or not, allowing efficient exploration of subsets.

6.Efficient Algorithms:
Many algorithms that deal with sets or masks can benefit from bit manipulation to reduce time complexity.
For instance:



