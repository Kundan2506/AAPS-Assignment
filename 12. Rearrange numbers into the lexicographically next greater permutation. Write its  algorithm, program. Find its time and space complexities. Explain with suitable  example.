ðŸ”¹1. Algorithm (Next Greater Permutation)

*Approach:
The general idea is to find the first pair of numbers where the first number is smaller than the second, and then swap the smallest larger element from the right side to make the permutation the next one lexicographically.

*Steps:
1.Step 1: Find the largest index i such that nums[i] < nums[i + 1]. If no such index exists, the array is in descending order, so we reverse the entire array to get the smallest permutation.
2.Step 2: Find the largest index j such that nums[j] > nums[i] (where i is the index found in Step 1). This ensures that we find the smallest number larger than nums[i] to swap with.
3.Step 3: Swap the elements at indices i and j.
4.Step 4: Reverse the sequence from i + 1 to the end of the array to get the smallest possible order.

ðŸ”¹2. Java Program
public class NextGreaterPermutation {

    public static void nextPermutation(int[] nums) {
        int n = nums.length;

        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        
        if (i >= 0) {
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1, n - 1);
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private static void reverse(int[] nums, int left, int right) {
        while (left < right) {
            swap(nums, left++, right--);
        }
    }

ðŸ”¹3. Time and Space Complexity

Task	              Complexity
Time Complexity	    O(n)
Space Complexity	  O(1)

ðŸ”¹4. Example Walkthrough
Input 1: nums = {1, 2, 3}
Steps:
Step 1: Find the largest index i such that nums[i] < nums[i + 1]. Here, i = 1 (because nums[1] = 2 and nums[2] = 3).
Step 2: Find the largest index j such that nums[j] > nums[i]. Here, j = 2 (because nums[2] = 3).
Step 3: Swap nums[1] and nums[2], resulting in nums = {1, 3, 2}.
Step 4: Reverse the sequence from i + 1 to the end. Since i + 1 = 2, and the sequence consists of just one element, it remains the same.

Output: The next permutation is [1, 3, 2].

Input 2: nums = {3, 2, 1}
Steps:
Step 1: Find the largest index i such that nums[i] < nums[i + 1]. Here, no such i exists, so the array is in descending order.
Step 2: Reverse the entire array to get the smallest permutation.

Output: The next permutation is [1, 2, 3].
