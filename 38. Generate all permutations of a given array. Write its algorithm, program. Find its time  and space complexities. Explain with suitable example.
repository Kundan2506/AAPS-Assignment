public class Permutations {

    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, result, new ArrayList<>());
        return result;
    }

    private static void backtrack(int[] nums, List<List<Integer>> result, List<Integer> current) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (current.contains(nums[i])) continue;

            current.add(nums[i]);
            backtrack(nums, result, current);

            current.remove(current.size() - 1);
        }
    }
}

ğŸ”¹Time and Space Complexity:

Time Complexity: O(n!), where n is the number of elements in the input array. This is because there are n! possible permutations of n elements, and we need to generate each permutation.
Space Complexity: O(n) for the recursion stack and the space required to store a permutation. The maximum space required at any point is proportional to the length of the array n.
