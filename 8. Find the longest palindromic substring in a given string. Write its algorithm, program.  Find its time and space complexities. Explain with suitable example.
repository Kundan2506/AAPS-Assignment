ðŸ”¹1. Algorithm (Expand Around Center)
*Steps:
1.A palindrome mirrors around its center. The center of a palindrome can be a single character (for odd-length palindromes) or two characters (for even-length palindromes).
2.For each character in the string:
      Treat it as a center and try to expand around it to check for the longest palindrome.
      Check both possibilities: one center for odd-length, and two adjacent centers for even-length palindromes.
3.Track the longest palindrome encountered during the expansion process.

ðŸ”¹2.Java Program
public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }
private static int expandAroundCenter(String s, int left, int right){
    while(left>=0 && right<s.length() && s.charAt(left) == s.charAt(right)){
        left--;
        right++;
    }
    return right-left-1;
}

ðŸ”¹3. Time and Space Complexity

Task	                Complexity
Time Complexity	      O(n^2)
Space Complexity	    O(1)

ðŸ”¹4. Example Walkthrough
Input:
s = "babad"

*Steps:
First character 'b': Expand around the center.
Odd: "b"
Even: (no match)

Second character 'a': Expand around the center.
Odd: "aba"
Even: (no match)

Third character 'b': Expand around the center.
Odd: "bab"
Even: (no match)

Fourth character 'a': Expand around the center.
Odd: "aba"
Even: (no match)

Fifth character 'd': Expand around the center.
Odd: "d"
Even: (no match)

Max Length Palindrome Found: "aba" (or "bab")

*Output:
Longest Palindromic Substring: bab
Longest Palindromic Substring: bb
